// –ü–æ–≤–Ω–∏–π –∫–æ–¥ js/script.js, —è–∫–∏–π –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.
document.addEventListener('DOMContentLoaded', () => {

    // =========================================================================
    // 1. –î–ê–ù–Ü –ü–†–û–§–Ü–õ–Ü–í (–û–ë'–Ñ–ö–¢–ò)
    // =========================================================================
    const profiles = [
        // –ñ–Ü–ù–û–ß–Ü –ü–†–û–§–Ü–õ–Ü
        { id: 1, name: '–ê–Ω–Ω–∞', age: 32, city: '–ö–∏—ó–≤', description: '–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä, –ª—é–±–∏—Ç—å —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å—å–∫–∏–π –¥–∏–∑–∞–π–Ω —Ç–∞ –≥—ñ—Ä—Å—å–∫—ñ –ø–æ—Ö–æ–¥–∏.', img: 'placeholder-woman-1.jpg', gender: 'women' },
        { id: 2, name: '–û–ª–µ–Ω–∞', age: 28, city: '–õ—å–≤—ñ–≤', description: '–•—É–¥–æ–∂–Ω–∏—Ü—è, —Ü—ñ–Ω—É—î –∫–ª–∞—Å–∏—á–Ω—É –º—É–∑–∏–∫—É —Ç–∞ —Ç–∏—Ö—ñ –≤–µ—á–æ—Ä–∏.', img: 'placeholder-woman-2.jpg', gender: 'women' },
        { id: 3, name: '–°–æ—Ñ—ñ—è', age: 35, city: '–û–¥–µ—Å–∞', description: '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —à—É–∫–∞—î –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Å–ø—ñ–ª—å–Ω–∏—Ö –ø–æ–¥–æ—Ä–æ–∂–µ–π —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.', img: 'placeholder-woman-3.jpg', gender: 'women' },
        
        // –ß–û–õ–û–í–Ü–ß–Ü –ü–†–û–§–Ü–õ–Ü
        { id: 4, name: '–î–º–∏—Ç—Ä–æ', age: 37, city: '–ö–∏—ó–≤', description: 'IT-–ø—ñ–¥–ø—Ä–∏—î–º–µ—Ü—å, –∑–∞—Ö–æ–ø–ª—é—î—Ç—å—Å—è –¥–∞–π–≤—ñ–Ω–≥–æ–º —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏.', img: 'placeholder-man-1.jpg', gender: 'men' },
        { id: 5, name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä', age: 30, city: '–î–Ω—ñ–ø—Ä–æ', description: '–§—ñ—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä, —Ü—ñ–Ω—É—î –∑–¥–æ—Ä–æ–≤–∏–π —Å–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è —Ç–∞ —â–∏—Ä—ñ—Å—Ç—å.', img: 'placeholder-man-2.jpg', gender: 'men' },
        { id: 6, name: '–ú–∞–∫—Å–∏–º', age: 41, city: '–•–∞—Ä–∫—ñ–≤', description: '–ê–¥–≤–æ–∫–∞—Ç, –ª—é–±–∏—Ç—å –¥–∂–∞–∑ —Ç–∞ —Ñ—ñ–ª–æ—Å–æ—Ñ—Å—å–∫—ñ —Ä–æ–∑–º–æ–≤–∏.', img: 'placeholder-man-3.jpg', gender: 'men' }
    ];

    // =========================================================================
    // 2. –ë–ê–ó–û–í–ê –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–¨ (–ê–Ω—ñ–º–∞—Ü—ñ—ó, –ú–µ–Ω—é, –õ—ñ—á–∏–ª—å–Ω–∏–∫)
    // =========================================================================
    
    // === –õ–û–ì–Ü–ö–ê –ê–ù–Ü–ú–ê–¶–Ü–á FADE-IN –ü–†–ò –°–ö–†–û–õ–Ü–ù–ì–£ ===
    const fadeInElements = document.querySelectorAll('.fade-in');
    const observerOptions = { root: null, rootMargin: '0px', threshold: 0.2 };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    fadeInElements.forEach(el => observer.observe(el));

    // === –õ–û–ì–Ü–ö–ê –ú–û–ë–Ü–õ–¨–ù–û–ì–û –ú–ï–ù–Æ ===
    const navToggle = document.querySelector('.nav-toggle');
    const mainNav = document.querySelector('.main-nav');

    if (navToggle && mainNav) {
        navToggle.addEventListener('click', () => {
            mainNav.classList.toggle('is-open');
        });
    }

    console.log("Ticket 2 Love: –ü—Ä–æ–µ–∫—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");

    // === –§–£–ù–ö–¶–Ü–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –õ–Ü–ß–ò–õ–¨–ù–ò–ö–ê –û–ë–†–ê–ù–ò–• ===
    const updateFavoritesCounter = () => {
        const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
        const count = favorites.length;
        const favoritesButtons = document.querySelectorAll('.favorites-button');
        
        favoritesButtons.forEach(button => {
            button.textContent = `–û–±—Ä–∞–Ω—ñ (${count})`;
        });
        
        const selectCountSpan = document.getElementById('select-count');
        if (selectCountSpan) {
            selectCountSpan.textContent = `(${count}/3)`;
            const proceedButton = document.getElementById('proceed-to-application');
            if (proceedButton) {
                 if (count > 0) {
                    proceedButton.classList.remove('disabled');
                    proceedButton.removeAttribute('disabled');
                 } else {
                    proceedButton.classList.add('disabled');
                    proceedButton.setAttribute('disabled', 'true');
                 }
            }
        }
    };

    updateFavoritesCounter();


    // =========================================================================
    // 3. –õ–û–ì–Ü–ö–ê –ö–ê–¢–ê–õ–û–ì–£ (catalogue.html: –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø)
    // =========================================================================
    
    const catalogueSection = document.getElementById('profile-catalogue');

    if (catalogueSection) {
        
        // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É gender –∑ URL
        const urlParams = new URLSearchParams(window.location.search);
        const selectedGender = urlParams.get('gender'); 
        
        // 2. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
        let filteredProfiles = [];
        let catalogueTitle = '–ö–∞—Ç–∞–ª–æ–≥ –ü—Ä–æ—Ñ—ñ–ª—ñ–≤';
        
        if (selectedGender === 'men') {
            filteredProfiles = profiles.filter(p => p.gender === 'men'); 
            catalogueTitle = '–ö–∞—Ç–∞–ª–æ–≥ –ß–æ–ª–æ–≤—ñ—á–∏—Ö –ü—Ä–æ—Ñ—ñ–ª—ñ–≤ ü§µ';
        } else if (selectedGender === 'women') {
            filteredProfiles = profiles.filter(p => p.gender === 'women'); 
            catalogueTitle = '–ö–∞—Ç–∞–ª–æ–≥ –ñ—ñ–Ω–æ—á–∏—Ö –ü—Ä–æ—Ñ—ñ–ª—ñ–≤ üåπ';
        } else {
            // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ –∂—ñ–Ω–æ–∫, —è–∫—â–æ –ø–µ—Ä–µ—Ö—ñ–¥ –±—É–≤ –Ω–µ –∑ –≥–æ–ª–æ–≤–Ω–æ—ó
            filteredProfiles = profiles.filter(p => p.gender === 'women');
            catalogueTitle = '–ö–∞—Ç–∞–ª–æ–≥ –ñ—ñ–Ω–æ—á–∏—Ö –ü—Ä–æ—Ñ—ñ–ª—ñ–≤ üåπ (–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å –Ω–∞ –ì–æ–ª–æ–≤–Ω—ñ–π)';
        }

        // 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        const catalogueH1 = document.getElementById('catalogue-title');
        if(catalogueH1) {
             catalogueH1.textContent = catalogueTitle;
        }

        const profileGrid = document.getElementById('profile-grid');
        
        if (profileGrid) {
            
            filteredProfiles.forEach(profile => {
                
                const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                const isFavorite = favorites.includes(profile.id.toString());
                const favoriteClass = isFavorite ? 'is-favorite' : '';
                
                const profileCard = document.createElement('div');
                profileCard.className = 'profile-card';
                profileCard.innerHTML = `
                    <div class="card-header-wrapper">
                         <img src="assets/img/${profile.img}" alt="–§–æ—Ç–æ ${profile.name}" class="profile-photo">
                         <button class="favorite-toggle ${favoriteClass}" data-id="${profile.id}">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                            </svg>
                        </button>
                    </div>
                    <div class="card-content">
                        <h2 class="profile-name">${profile.name}, ${profile.age}</h2>
                        <p class="profile-city">${profile.city}</p>
                        <p class="profile-description">${profile.description}</p>
                        <a href="profile.html?id=${profile.id}" class="view-profile-btn cta-her">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>
                    </div>
                `;
                profileGrid.appendChild(profileCard);
            });
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–û–±—Ä–∞—Ç–∏"
            document.querySelectorAll('.favorite-toggle').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const id = e.currentTarget.dataset.id;
                    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                    
                    if (favorites.includes(id)) {
                        // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –æ–±—Ä–∞–Ω–∏—Ö
                        favorites = favorites.filter(favId => favId !== id);
                        e.currentTarget.classList.remove('is-favorite');
                    } else {
                        // –î–æ–¥–∞—Ç–∏ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö (–∑ –ª—ñ–º—ñ—Ç–æ–º 3)
                        if (favorites.length < 3) {
                            favorites.push(id);
                            e.currentTarget.classList.add('is-favorite');
                        } else {
                            alert('–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É (3 –ø—Ä–æ—Ñ—ñ–ª—ñ). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.');
                        }
                    }
                    
                    localStorage.setItem('favorites', JSON.stringify(favorites));
                    updateFavoritesCounter();
                });
            });
        }
        
        // –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –∑–∞—è–≤–∫–∏
        const proceedButton = document.getElementById('proceed-to-application');
        if (proceedButton) {
            proceedButton.addEventListener('click', () => {
                const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                if (favorites.length > 0) {
                    alert(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ñ–æ—Ä–º–∏ –∑–∞—è–≤–∫–∏. –û–±—Ä–∞–Ω—ñ ID: ${favorites.join(', ')}`);
                } else {
                    alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—Ä–æ—Ñ—ñ–ª—å.');
                }
            });
        }
    }


    // =========================================================================
    // 4. –õ–û–ì–Ü–ö–ê –°–¢–û–†–Ü–ù–ö–ò –î–ï–¢–ê–õ–¨–ù–û–ì–û –ü–†–û–§–Ü–õ–Æ (profile.html)
    // =========================================================================
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞ ID
    const getProfileData = (id) => {
        return profiles.find(p => p.id.toString() === id);
    };

    const profileDetailSection = document.getElementById('profile-detail');
    if (profileDetailSection) {
        const urlParams = new URLSearchParams(window.location.search);
        const profileId = urlParams.get('id'); 
        const profile = getProfileData(profileId);
        
        if (profile) {
            const profileNameDetail = document.querySelector('.profile-name-detail');
            const profileCityDetail = document.querySelector('.profile-city-detail');
            const mainProfilePhoto = document.querySelector('.main-profile-photo');
            const selectProfileBtn = document.getElementById('select-profile-btn');

            if (profileNameDetail) profileNameDetail.textContent = `${profile.name}, ${profile.age}`;
            if (profileCityDetail) profileCityDetail.textContent = profile.city;
            if (mainProfilePhoto) mainProfilePhoto.src = `assets/img/${profile.img}`;

            if (selectProfileBtn) {
                const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                const isFavorite = favorites.includes(profileId);
                
                selectProfileBtn.textContent = isFavorite ? `–í–∏–±—Ä–∞–Ω–æ ‚úÖ` : `–û–±—Ä–∞—Ç–∏ ${profile.name}`;
                if (isFavorite) selectProfileBtn.classList.add('is-favorite');
                
                selectProfileBtn.addEventListener('click', () => {
                    let favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                    
                    if (!favorites.includes(profileId)) {
                        if (favorites.length < 3) {
                            favorites.push(profileId);
                            localStorage.setItem('favorites', JSON.stringify(favorites));
                            updateFavoritesCounter();
                            
                            selectProfileBtn.textContent = `–í–∏–±—Ä–∞–Ω–æ ‚úÖ`;
                            selectProfileBtn.classList.add('is-favorite');
                            alert(`${profile.name} –¥–æ–¥–∞–Ω–æ –¥–æ –í–∞—à–∏—Ö –æ–±—Ä–∞–Ω–∏—Ö! ‚úÖ`);
                        } else {
                            alert('–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É (3 –ø—Ä–æ—Ñ—ñ–ª—ñ). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏.');
                        }
                    } else {
                        alert(`${profile.name} –≤–∂–µ —É –í–∞—à–∏—Ö –æ–±—Ä–∞–Ω–∏—Ö.`);
                    }
                });
            }

        } else {
             if (profileDetailSection) {
                profileDetailSection.innerHTML = '<p class="error-message">–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>';
            }
        }
    }


    // =========================================================================
    // 5. –õ–û–ì–Ü–ö–ê –ú–û–î–ê–õ–¨–ù–û–ì–û –í–Ü–ö–ù–ê (–§–Ü–õ–¨–¢–†–ò) 
    // =========================================================================
    const openFiltersBtn = document.getElementById('open-filters');
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    
    // –í–º—ñ—Å—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    modalOverlay.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–§—ñ–ª—å—Ç—Ä–∏ –ü—Ä–æ—Ñ—ñ–ª—ñ–≤</h3>
                <button class="close-btn">&times;</button>
            </div>
            <form id="filter-form">
                <div class="filter-group">
                    <label for="age-range">–í—ñ–∫ (20 - 45)</label>
                    <input type="range" id="age-range" min="18" max="55" value="30">
                    <span id="age-value" style="font-family: var(--font-sans);">30 —Ä–æ–∫—ñ–≤</span>
                </div>
                <div class="filter-group">
                    <label for="height-range">–ó—Ä—ñ—Å—Ç (160 - 190 —Å–º)</label>
                    <input type="range" id="height-range" min="150" max="210" value="175">
                    <span id="height-value" style="font-family: var(--font-sans);">175 —Å–º</span>
                </div>
                <button type="submit" class="cta-button cta-her" style="width: 100%; margin-top: 15px;">–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –§—ñ–ª—å—Ç—Ä–∏</button>
            </form>
        </div>
    `;

    if (document.getElementById('open-filters')) {
        document.body.appendChild(modalOverlay);
    }
    

    const closeBtn = modalOverlay.querySelector('.close-btn');
    const ageRange = document.getElementById('age-range');
    const ageValue = document.getElementById('age-value');
    const heightRange = document.getElementById('height-range');
    const heightValue = document.getElementById('height-value');

    if (openFiltersBtn) {
        openFiltersBtn.addEventListener('click', () => {
            modalOverlay.classList.add('is-open');
        });
    }

    const closeModal = () => {
        modalOverlay.classList.remove('is-open');
    };
    
    if (closeBtn) {
        closeBtn.addEventListener('click', closeModal);
    }
    if (modalOverlay) {
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                closeModal(); 
            }
        });
    }

    if (ageRange && heightRange) {
        ageRange.addEventListener('input', () => {
            ageValue.textContent = `${ageRange.value} —Ä–æ–∫—ñ–≤`;
        });
        heightRange.addEventListener('input', () => {
            heightValue.textContent = `${heightRange.value} —Å–º`;
        });
    }


});
// =========================================================================
// =========================================================================
// 6. CANVAS –ê–ù–Ü–ú–ê–¶–Ü–Ø –°–ï–†–î–ï–¶–¨ –£ HERO-–°–ï–ö–¶–Ü–á
// =========================================================================
const canvas = document.getElementById('hearts-canvas');
if (canvas) {
    const ctx = canvas.getContext('2d');
    let hearts = [];
    let canvasWidth, canvasHeight;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É canvas
    function resizeCanvas() {
        canvasWidth = canvas.width = window.innerWidth;
        canvasHeight = canvas.height = document.querySelector('.hero-section').offsetHeight;
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // –ö–ª–∞—Å –¥–ª—è —Å–µ—Ä—Ü—è
    class Heart {
        constructor() {
            this.x = Math.random() * canvasWidth;
            this.y = canvasHeight + 20;
            this.size = Math.random() * 20 + 10;
            this.speedY = Math.random() * -2 - 1;
            this.speedX = (Math.random() - 0.5) * 2;
            this.opacity = Math.random() * 0.5 + 0.3;
        }

        update() {
            this.y += this.speedY;
            this.x += this.speedX;
            this.opacity -= 0.002;
            if (this.y < -this.size || this.opacity <= 0) {
                this.y = canvasHeight + 20;
                this.x = Math.random() * canvasWidth;
                this.opacity = Math.random() * 0.5 + 0.3;
            }
        }

        draw() {
            const gradient = ctx.createLinearGradient(this.x, this.y, this.x + this.size, this.y + this.size);
            gradient.addColorStop(0, '#C2185B');
            gradient.addColorStop(1, '#8D6E63');
            ctx.fillStyle = gradient;
            ctx.globalAlpha = Math.max(this.opacity, 0.5);
            ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
            ctx.shadowBlur = 5;
            ctx.shadowOffsetX = 2;
            ctx.shadowOffsetY = 2;

            ctx.beginPath();
            ctx.moveTo(this.x, this.y + this.size / 4);
            ctx.bezierCurveTo(this.x - this.size / 2, this.y - this.size / 2, this.x - this.size, this.y + this.size / 4, this.x, this.y + this.size);
            ctx.bezierCurveTo(this.x + this.size, this.y + this.size / 4, this.x + this.size / 2, this.y - this.size / 2, this.x, this.y + this.size / 4);
            ctx.fill();
            ctx.globalAlpha = 1;
            ctx.shadowBlur = 0;
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–¥–µ—Ü—å
    function initHearts() {
        hearts = [];
        const heartCount = Math.floor(canvasWidth / 50);
        for (let i = 0; i < heartCount; i++) {
            hearts.push(new Heart());
        }
    }
    initHearts();

    // –ê–Ω—ñ–º–∞—Ü—ñ—è
    let lastTime = 0;
    function animate(timestamp) {
        const deltaTime = timestamp - lastTime;
        lastTime = timestamp;

        ctx.clearRect(0, 0, canvasWidth, canvasHeight);

        // –°–µ—Ä—Ü—è
        hearts.forEach(heart => {
            heart.update();
            heart.draw();
        });

        requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);

    // –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
    window.addEventListener('resize', () => {
        resizeCanvas();
        initHearts();
    });
}